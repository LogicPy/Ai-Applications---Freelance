# app.py

from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import numpy as np
import os
from data_processing.preprocess import preprocess_input_data  # Import only the preprocessing function
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager
import joblib  # Import joblib to load the model

app = Flask(__name__)
CORS(app)

# Paths
MODEL_PATH = os.path.join('models', 'model_name.pkl')  # Ensure this path points to your .pkl model

# Load the trained model
def load_model():
    if os.path.exists(MODEL_PATH):
        model = joblib.load(MODEL_PATH)
        print("Model loaded successfully.")
    else:
        raise FileNotFoundError(f"Model file not found at {MODEL_PATH}")
    return model

model = load_model()  # Load the model once when the app starts

@app.route('/')
def home():
    return render_template('Ai-Scanner.html')  # Ensure the template name matches exactly

@app.route('/scan', methods=['POST'])
def scan():
    data = request.get_json()
    if not data or 'text' not in data:
        return jsonify({"error": "No text provided"}), 400

    text_data = data['text']
    processed_data = preprocess_input_data(text_data)

    prediction = model.predict(processed_data)
    result_list = prediction.tolist()
    return jsonify(result_list), 200

@app.route('/predict', methods=['POST'])
def predict():
    data = request.get_json()
    if not data or 'text' not in data or 'url' not in data:
        return jsonify({"error": "Text and URL required"}), 400

    text_data = data['text']
    url = data['url']
    processed_data = preprocess_input_data(text_data)

    # Initialize Selenium WebDriver with headless option
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')  # Run in headless mode
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')

    try:
        driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
        driver.get(url)
        # Add any interactions with the webpage here if needed
        driver.quit()
    except Exception as e:
        return jsonify({"error": f"Selenium encountered an error: {str(e)}"}), 500

    prediction = model.predict(processed_data)
    decoded_prediction = prediction[0]  # Assuming single prediction

    return jsonify([decoded_prediction]), 200  # Return as array


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
