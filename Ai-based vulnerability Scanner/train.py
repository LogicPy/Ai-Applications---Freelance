# train.py

from data_processing.preprocess import load_vectorizer
from sklearn.linear_model import LogisticRegression  # Example classifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import joblib
import os

# Paths
MODEL_PATH = os.path.join('models', 'model_name.pkl')
TRAINING_DATA_PATH = os.path.join('training.txt')

def load_training_data():
    """
    Loads and preprocesses the training data.
    
    Returns:
        texts (list): List of vulnerability descriptions.
        labels (list): Corresponding list of vulnerability labels.
    """
    if not os.path.exists(TRAINING_DATA_PATH):
        raise FileNotFoundError(f"Training data file not found at {TRAINING_DATA_PATH}")
    with open(TRAINING_DATA_PATH, 'r', encoding='utf-8') as file:
        data = file.read().split('\n\n')  # Assuming double newline separates entries
    texts = []
    labels = []
    for entry in data:
        if not entry.strip():
            continue
        lines = entry.strip().split('\n')
        label = lines[0].strip()  # Assuming first line is label
        text = ' '.join(lines[1:]).strip()  # Remaining lines are description
        texts.append(text)
        labels.append(label)
    return texts, labels

def train_model():
    """
    Trains the machine learning model and saves it to disk.
    """
    vectorizer = load_vectorizer()
    texts, labels = load_training_data()
    X = vectorizer.transform(texts)
    y = labels

    # Split the data for evaluation
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Initialize and train the classifier
    model = LogisticRegression(max_iter=1000)
    model.fit(X_train, y_train)
    print("Model trained successfully.")

    # Evaluate the model
    predictions = model.predict(X_test)
    report = classification_report(y_test, predictions)
    print("Classification Report:\n", report)

    # Save the trained model
    joblib.dump(model, MODEL_PATH)
    print(f"Model saved successfully at {MODEL_PATH}")

if __name__ == "__main__":
    train_model()
