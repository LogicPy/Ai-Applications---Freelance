{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\threejs_ide\\\\threejs-ide\\\\frontend\\\\src\\\\components\\\\ThreeJSRenderer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OBJExporter } from 'three-stdlib'; // Ensure this is imported correctly\n\n// Define the scene globally\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst scene = new THREE.Scene();\n\n// Function to clear the scene before adding new objects\nconst clearScene = () => {\n  while (scene.children.length > 0) {\n    scene.remove(scene.children[0]);\n  }\n};\nconst ThreeJSRenderer = ({\n  code\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // Clear the scene before generating new objects\n    clearScene();\n\n    // Initialize the camera and renderer\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Add objects to the scene (this is where you generate the 3D models)\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube); // Add new object to the scene\n\n    // Set camera position\n    camera.position.set(0, 5, 10);\n    camera.lookAt(new THREE.Vector3(0, 0, 0));\n\n    // Animate the scene\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Cleanup on unmount\n    return () => {\n      if (mountRef.current) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, [code]); // Depend on code to regenerate models\n\n  // Export function for OBJ\n  const exportModelAsObj = () => {\n    const exporter = new OBJExporter();\n    if (scene.children.length > 0) {\n      const objData = exporter.parse(scene); // Export the scene with objects\n      // Trigger download of the .obj file\n      const blob = new Blob([objData], {\n        type: 'text/plain'\n      });\n      const link = document.createElement('a');\n      link.href = URL.createObjectURL(blob);\n      link.download = 'model.obj';\n      link.click();\n    } else {\n      console.error('No objects found in the scene for export.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportModelAsObj,\n      children: \"Export as OBJ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(ThreeJSRenderer, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ThreeJSRenderer;\nexport default ThreeJSRenderer;\nvar _c;\n$RefreshReg$(_c, \"ThreeJSRenderer\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OBJExporter","jsxDEV","_jsxDEV","scene","Scene","clearScene","children","length","remove","ThreeJSRenderer","code","_s","mountRef","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","current","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","set","lookAt","Vector3","animate","requestAnimationFrame","render","removeChild","exportModelAsObj","exporter","objData","parse","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","click","console","error","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/threejs_ide/threejs-ide/frontend/src/components/ThreeJSRenderer.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OBJExporter } from 'three-stdlib'; // Ensure this is imported correctly\r\n\r\n// Define the scene globally\r\nconst scene = new THREE.Scene();\r\n\r\n// Function to clear the scene before adding new objects\r\nconst clearScene = () => {\r\n  while (scene.children.length > 0) {\r\n    scene.remove(scene.children[0]);\r\n  }\r\n};\r\n\r\nconst ThreeJSRenderer = ({ code }) => {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Clear the scene before generating new objects\r\n    clearScene();\r\n\r\n    // Initialize the camera and renderer\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    // Add objects to the scene (this is where you generate the 3D models)\r\n    const geometry = new THREE.BoxGeometry();\r\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\r\n    const cube = new THREE.Mesh(geometry, material);\r\n    scene.add(cube); // Add new object to the scene\r\n\r\n    // Set camera position\r\n    camera.position.set(0, 5, 10);\r\n    camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n\r\n    // Animate the scene\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      if (mountRef.current) {\r\n        mountRef.current.removeChild(renderer.domElement);\r\n      }\r\n    };\r\n  }, [code]); // Depend on code to regenerate models\r\n\r\n  // Export function for OBJ\r\n  const exportModelAsObj = () => {\r\n    const exporter = new OBJExporter();\r\n    if (scene.children.length > 0) {\r\n      const objData = exporter.parse(scene);  // Export the scene with objects\r\n      // Trigger download of the .obj file\r\n      const blob = new Blob([objData], { type: 'text/plain' });\r\n      const link = document.createElement('a');\r\n      link.href = URL.createObjectURL(blob);\r\n      link.download = 'model.obj';\r\n      link.click();\r\n    } else {\r\n      console.error('No objects found in the scene for export.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div ref={mountRef}></div>\r\n      <button onClick={exportModelAsObj}>Export as OBJ</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThreeJSRenderer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}